%{
#include <stdlib.h>
#include <string.h>  
#include <stdio.h>
#include "y.tab.h" 
#include <math.h>	
%} 
%% 
[0-9]+ 
		{
		yylval.cal = atof(yytext); 
		return value;
		}
[\t]; 
\n return 0; 
.  return yytext [0]; 
%%
Yacc Code:
%{
	void yyerror ( char *err ) 
	{
    		fprintf( stdout, "wrong expression:-%s\n",  err );
   		printf( "\nPlease Enter Expression Again\n" );
	}
%}
%name parse 
%union
{
	  float cal;
}
%token <cal> value
%type <cal> expr
%left  '+'  '-' 
%left  '*'  '/' 
%nonassoc uminus 
%%
statement   : expr
			 {	
				 printf ( "Answer is: %g\n",  $1 );
				 if( $1 < 0 )
				 {
				  		 printf( "Negative Expression\n",  $1 );
				 }
				 return 0;
			  };

expr   :  expr   '+' expr { $$  =  $1 +  $3; }  
	    |  expr   '-'  expr { $$  =  $1 -  $3; }
	    |  expr   '*' expr { $$  =  $1 *  $3; } 
	    |  expr    '/' expr
	   {
			if ($3 = =  0) 
			{
				printf( "Sorry!Divide By  Zero:\n" ); 
				exit(0);
			 }
		     else 
				$$  =  $1 /  $3; 
	    } 

	   |  '-' expr  %prec uminus { $$  = -$2; } 
	   |  '(' expr ')' { $$  =  $2; } 
	   |  value; 
%%
int main()
{
	printf("\nEnter Your Desired Expression\n");
	yyparse();	
	return 0;
}
